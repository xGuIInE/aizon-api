AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Sample API for Aizon solutions.

Parameters:
  Environment:
    Description: Environment prefixed to resource names
    Type: String

Resources:
  # Tables
  SolutionsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "owner"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "owner"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Sub ${Environment}-aizon-solutions
  ScreensTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "solution_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "solution_id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Sub ${Environment}-aizon-screens
  WidgetsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "screen_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "screen_id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Sub ${Environment}-aizon-widgets
  # USER POOLS
  adminPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment} Aizon admins
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  clientPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment} Aizon clients
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
  # POOLS APP CLIENTS
  adminPoolAppClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${Environment}-admin-client
      GenerateSecret: true
      UserPoolId: !Ref adminPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
  clientPoolAppClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${Environment}-app-client
      GenerateSecret: false
      UserPoolId: !Ref clientPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
  # API GATEWAY
  adminApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Environment}-admin-api
      TracingEnabled: true
      OpenApiVersion: 3.0.2
      Auth:
        Authorizers:
          AdminUsers:
            UserPoolArn:
              Fn::GetAtt:
                - adminPool
                - Arn
            AuthType: "COGNITO_USER_POOLS"
        DefaultAuthorizer: AdminUsers
  # clientsApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: !Sub ${Environment}-clients-api
  #     TracingEnabled: true
  #     OpenApiVersion: 3.0.2

  # PERMISSIONS
  cognitoAllow:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow cognito access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cognito-idp:*"
            Resource: "*"
  # LAMBDA FUNCTIONS
  adminUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.adminUsers
      Runtime: nodejs14.x
      CodeUri: function/.
      Description: Manage users
      Timeout: 10
      FunctionName: !Sub ${Environment}-admin-users-function
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - !Ref cognitoAllow

      Tracing: Active
      Environment:
        Variables:
          USER_POOL_ID: !Ref clientPool
          # USER_POOL_APP_ID: !Ref clientPoolAppClient
      Events:
        createUser:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /users
            Method: POST
        deleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /users
            Method: DELETE

  adminSolutionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.adminSolutions
      Runtime: nodejs14.x
      CodeUri: function/.
      Description: Manage aizon solutions
      Timeout: 10
      FunctionName: !Sub ${Environment}-admin-solutions-function
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref SolutionsTable
      Tracing: Active
      Environment:
        Variables:
          SOLUTIONS_TABLE_NAME: !Ref SolutionsTable
          # PENDING
      Events:
        getSolutions:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /solutions
            Method: GET
        createSolution:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /solutions
            Method: POST
        modifySolution:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /solutions
            Method: PATCH
        deleteSolution:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /solutions
            Method: DELETE

  adminScreensFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.adminScreens
      Runtime: nodejs14.x
      CodeUri: function/.
      Description: Manage aizon screens
      Timeout: 10
      FunctionName: !Sub ${Environment}-admin-screens-function
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ScreensTable
      Tracing: Active
      Environment:
        Variables:
          SCREENS_TABLE_NAME: !Ref ScreensTable
          # PENDING
      Events:
        getScreens:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /screens
            Method: GET
        createScreen:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /screens
            Method: POST
        modifyScreen:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /screens
            Method: PATCH
        deleteScreen:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /screens
            Method: DELETE

  adminWidgetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.adminWidgets
      Runtime: nodejs14.x
      CodeUri: function/.
      Description: Manage aizon widgets
      Timeout: 10
      FunctionName: !Sub ${Environment}-admin-widgets-function
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref WidgetsTable
      Tracing: Active
      Environment:
        Variables:
          WIDGETS_TABLE_NAME: !Ref WidgetsTable
          # PENDING
      Events:
        getWidgets:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /widgets
            Method: GET
        createWidget:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /widgets
            Method: POST
        modifyWidget:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /widgets
            Method: PATCH
        deleteWidget:
          Type: Api
          Properties:
            RestApiId: !Ref adminApi
            Path: /widgets
            Method: DELETE
  # clientFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: admin.clientUsers
  #     Runtime: nodejs14.x
  #     CodeUri: function/.
  #     Description: Manage users
  #     Timeout: 10
  #     FunctionName: !Sub ${Environment}-client-function
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - AWSLambda_ReadOnlyAccess
  #       - AWSXrayWriteOnlyAccess
  #       - !Ref cognitoAllow

  #     Tracing: Active
  #     Environment:
  #       Variables:
  #         USER_POOL_ID: !Ref clientPool
  #         USER_POOL_APP_ID: !Ref clientPoolAppClient
  #     Events:
  #       logIn:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref clientsApi
  #           Path: /auth
  #           Method: POST
